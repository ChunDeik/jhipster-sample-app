name: Application CI
on: [push, pull_request]
jobs:
  pipeline:
    name: jhipsterSampleApplication pipeline
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
    timeout-minutes: 40
    env:
      NODE_VERSION: 20.15.0
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 20.15.0
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17.x'
      - name: Install node.js packages
        run: npm install
      - name: Run backend test
        run: |
          chmod +x mvnw
          npm run ci:backend:test
      - name: Run frontend test
        run: npm run ci:frontend:test

      - name: Build JAR with Maven
        run: ./mvnw -Pprod clean verify
      - name: 'E2E: Package'
        run: npm run ci:e2e:package
      - name: 'E2E: Prepare'
        run: npm run ci:e2e:prepare
      - name: 'E2E: Run'
        run: npm run ci:e2e:run
      - name: 'E2E: Teardown'
        run: npm run ci:e2e:teardown
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/jhipster-sample-app:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/jhipster-sample-app:latest

      - name: Run Docker Container (simulate deployment)
        run: |
          docker network create jhipster-net
          docker run -d --name db \
            -e POSTGRES_PASSWORD=admin \
            -e POSTGRES_USER=admin \
            -e POSTGRES_DB=jhipsterSampleApplication \
            --network jhipster-net \
            postgres:15
          docker run -d -p 8081:8080 \
            --name app \
            --network jhipster-net \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/jhipsterSampleApplication \
            chundeik24/jhipster-sample-app:latest
          sleep 20
          curl http://localhost:8081
