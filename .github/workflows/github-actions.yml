name: Application CI/CD

on: [push, pull_request]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.set_image.outputs.image }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: 20.15.0

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17.x'

      - name: Install node.js packages
        run: npm install

      - name: Build JAR with Maven
        run: ./mvnw -Pprod clean verify

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 20.15.0
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17.x'
      - name: Run backend test
        run: |
          chmod +x mvnw
          npm run ci:backend:test

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 20.15.0

      - name: Install Angular CLI globally
        run: npm install -g @angular/cli

      - name: Install node.js packages
        run: npm install

      - name: Run frontend test
        run: npm run ci:frontend:test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 20.15.0

      - name: 'E2E: Package'
        run: npm run ci:e2e:package
      - name: 'E2E: Prepare'
        run: npm run ci:e2e:prepare
      - name: 'E2E: Run'
        run: npm run ci:e2e:run
      - name: 'E2E: Teardown'
        run: npm run ci:e2e:teardown

  deploy:
    name: Build & Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    needs: [build, backend-test, frontend-test, e2e]
    steps:
      - uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/jhipster-sample-app:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/jhipster-sample-app:latest
